version: 2.1 # use CircleCI 2.0
orbs:
  aws-ecr: circleci/aws-ecr@3.1.0
  aws-ecs: circleci/aws-ecs@0.0.7
jobs: # basic units of work in a run
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: shufo/go-graphql-base:1.12
      # CircleCI MySQL images available at: https://hub.docker.com/r/circleci/mysql/
      - image: circleci/mysql:5.7-ram
        environment: # environment variables for primary container
          MYSQL_DATABASE: example
          MYSQL_ROOT_HOST: "%"
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      - image: circleci/redis:5-alpine

    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/app
    environment: # environment variables for the build itself
      JWT_SECRET: secret
      APP_ENV: ci
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      DB_DATABASE: example
      REDIS_HOST: 127.0.0.1

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run:
          name: Check if go code is formatted
          command: |
            ! gofmt -d . 2>&1 | read
      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-mod-{{ .Branch }}-{{ checksum "go.mod" }}

      #  CircleCi's Go Docker image includes netcat
      #  This allows polling the DB port to confirm it is open before proceeding
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

      - run: go mod download # download modules

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-mod-{{ .Branch }}-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg"

      - run:
          name: Run tests
          command: |
            go test -v ./...

      - run:
          name: packaging app
          command: |
            packr build -o app

      - persist_to_workspace:
          root: .
          paths:
            - .

  push_image:
    docker:
      - image: circleci/python:3-stretch-browsers
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: interpolation environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com' >> $BASH_ENV
            source $BASH_ENV
      - aws-ecr/build-and-push-image:
          checkout: false
          repo: "example-app"
          tag: "${CIRCLE_SHA1}"
          dockerfile: "Dockerfile.prod"
      - run:
          name: add latest tag
          command: |
            docker tag \
              ${AWS_ECR_ACCOUNT_URL}/example-app:${CIRCLE_SHA1} \
              ${AWS_ECR_ACCOUNT_URL}/example-app:latest
      - aws-ecr/push-image:
          repo: "example-app"
          tag: "latest"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build_and_test
      - push_image:
          requires:
            - build_and_test
      - aws-ecs/deploy-service-update:
          requires:
            - push_image
          family: "app"
          cluster-name: "example-development-app"
          container-image-name-updates: "container=app,tag=${CIRCLE_SHA1}"
