// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AuthenticationProvider is an object representing the database table.
type AuthenticationProvider struct {
	ID               int         `gqlgen:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           int         `gqlgen:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProviderType     string      `gqlgen:"provider_type" boil:"provider_type" json:"provider_type" toml:"provider_type" yaml:"provider_type"`
	ProviderUsername string      `gqlgen:"provider_username" boil:"provider_username" json:"provider_username" toml:"provider_username" yaml:"provider_username"`
	ProviderPassword string      `gqlgen:"provider_password" boil:"provider_password" json:"provider_password" toml:"provider_password" yaml:"provider_password"`
	FirstName        null.String `gqlgen:"first_name" boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName         null.String `gqlgen:"last_name" boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	FullName         null.String `gqlgen:"full_name" boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	DisplayName      null.String `gqlgen:"display_name" boil:"display_name" json:"display_name,omitempty" toml:"display_name" yaml:"display_name,omitempty"`
	Email            null.String `gqlgen:"email" boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	ProfileImageURL  null.String `gqlgen:"profile_image_url" boil:"profile_image_url" json:"profile_image_url,omitempty" toml:"profile_image_url" yaml:"profile_image_url,omitempty"`
	CreatedAt        null.Time   `gqlgen:"created_at" boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time   `gqlgen:"updated_at" boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authenticationProviderR `gqlgen:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L authenticationProviderL  `gqlgen:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthenticationProviderColumns = struct {
	ID               string
	UserID           string
	ProviderType     string
	ProviderUsername string
	ProviderPassword string
	FirstName        string
	LastName         string
	FullName         string
	DisplayName      string
	Email            string
	ProfileImageURL  string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	ProviderType:     "provider_type",
	ProviderUsername: "provider_username",
	ProviderPassword: "provider_password",
	FirstName:        "first_name",
	LastName:         "last_name",
	FullName:         "full_name",
	DisplayName:      "display_name",
	Email:            "email",
	ProfileImageURL:  "profile_image_url",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuthenticationProviderWhere = struct {
	ID               whereHelperint
	UserID           whereHelperint
	ProviderType     whereHelperstring
	ProviderUsername whereHelperstring
	ProviderPassword whereHelperstring
	FirstName        whereHelpernull_String
	LastName         whereHelpernull_String
	FullName         whereHelpernull_String
	DisplayName      whereHelpernull_String
	Email            whereHelpernull_String
	ProfileImageURL  whereHelpernull_String
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: `id`},
	UserID:           whereHelperint{field: `user_id`},
	ProviderType:     whereHelperstring{field: `provider_type`},
	ProviderUsername: whereHelperstring{field: `provider_username`},
	ProviderPassword: whereHelperstring{field: `provider_password`},
	FirstName:        whereHelpernull_String{field: `first_name`},
	LastName:         whereHelpernull_String{field: `last_name`},
	FullName:         whereHelpernull_String{field: `full_name`},
	DisplayName:      whereHelpernull_String{field: `display_name`},
	Email:            whereHelpernull_String{field: `email`},
	ProfileImageURL:  whereHelpernull_String{field: `profile_image_url`},
	CreatedAt:        whereHelpernull_Time{field: `created_at`},
	UpdatedAt:        whereHelpernull_Time{field: `updated_at`},
}

// AuthenticationProviderRels is where relationship names are stored.
var AuthenticationProviderRels = struct {
	User           string
	PasswordResets string
}{
	User:           "User",
	PasswordResets: "PasswordResets",
}

// authenticationProviderR is where relationships are stored.
type authenticationProviderR struct {
	User           *User
	PasswordResets PasswordResetSlice
}

// NewStruct creates a new relationship struct
func (*authenticationProviderR) NewStruct() *authenticationProviderR {
	return &authenticationProviderR{}
}

// authenticationProviderL is where Load methods for each relationship are stored.
type authenticationProviderL struct{}

var (
	authenticationProviderColumns               = []string{"id", "user_id", "provider_type", "provider_username", "provider_password", "first_name", "last_name", "full_name", "display_name", "email", "profile_image_url", "created_at", "updated_at"}
	authenticationProviderColumnsWithoutDefault = []string{"user_id", "provider_type", "provider_username", "provider_password", "first_name", "last_name", "full_name", "display_name", "email", "profile_image_url", "created_at", "updated_at"}
	authenticationProviderColumnsWithDefault    = []string{"id"}
	authenticationProviderPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthenticationProviderSlice is an alias for a slice of pointers to AuthenticationProvider.
	// This should generally be used opposed to []AuthenticationProvider.
	AuthenticationProviderSlice []*AuthenticationProvider
	// AuthenticationProviderHook is the signature for custom AuthenticationProvider hook methods
	AuthenticationProviderHook func(context.Context, boil.ContextExecutor, *AuthenticationProvider) error

	authenticationProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authenticationProviderType                 = reflect.TypeOf(&AuthenticationProvider{})
	authenticationProviderMapping              = queries.MakeStructMapping(authenticationProviderType)
	authenticationProviderPrimaryKeyMapping, _ = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, authenticationProviderPrimaryKeyColumns)
	authenticationProviderInsertCacheMut       sync.RWMutex
	authenticationProviderInsertCache          = make(map[string]insertCache)
	authenticationProviderUpdateCacheMut       sync.RWMutex
	authenticationProviderUpdateCache          = make(map[string]updateCache)
	authenticationProviderUpsertCacheMut       sync.RWMutex
	authenticationProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authenticationProviderBeforeInsertHooks []AuthenticationProviderHook
var authenticationProviderBeforeUpdateHooks []AuthenticationProviderHook
var authenticationProviderBeforeDeleteHooks []AuthenticationProviderHook
var authenticationProviderBeforeUpsertHooks []AuthenticationProviderHook

var authenticationProviderAfterInsertHooks []AuthenticationProviderHook
var authenticationProviderAfterSelectHooks []AuthenticationProviderHook
var authenticationProviderAfterUpdateHooks []AuthenticationProviderHook
var authenticationProviderAfterDeleteHooks []AuthenticationProviderHook
var authenticationProviderAfterUpsertHooks []AuthenticationProviderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthenticationProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthenticationProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthenticationProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthenticationProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthenticationProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthenticationProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthenticationProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthenticationProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthenticationProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authenticationProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthenticationProviderHook registers your hook function for all future operations.
func AddAuthenticationProviderHook(hookPoint boil.HookPoint, authenticationProviderHook AuthenticationProviderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authenticationProviderBeforeInsertHooks = append(authenticationProviderBeforeInsertHooks, authenticationProviderHook)
	case boil.BeforeUpdateHook:
		authenticationProviderBeforeUpdateHooks = append(authenticationProviderBeforeUpdateHooks, authenticationProviderHook)
	case boil.BeforeDeleteHook:
		authenticationProviderBeforeDeleteHooks = append(authenticationProviderBeforeDeleteHooks, authenticationProviderHook)
	case boil.BeforeUpsertHook:
		authenticationProviderBeforeUpsertHooks = append(authenticationProviderBeforeUpsertHooks, authenticationProviderHook)
	case boil.AfterInsertHook:
		authenticationProviderAfterInsertHooks = append(authenticationProviderAfterInsertHooks, authenticationProviderHook)
	case boil.AfterSelectHook:
		authenticationProviderAfterSelectHooks = append(authenticationProviderAfterSelectHooks, authenticationProviderHook)
	case boil.AfterUpdateHook:
		authenticationProviderAfterUpdateHooks = append(authenticationProviderAfterUpdateHooks, authenticationProviderHook)
	case boil.AfterDeleteHook:
		authenticationProviderAfterDeleteHooks = append(authenticationProviderAfterDeleteHooks, authenticationProviderHook)
	case boil.AfterUpsertHook:
		authenticationProviderAfterUpsertHooks = append(authenticationProviderAfterUpsertHooks, authenticationProviderHook)
	}
}

// One returns a single authenticationProvider record from the query.
func (q authenticationProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthenticationProvider, error) {
	o := &AuthenticationProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authentication_providers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthenticationProvider records from the query.
func (q authenticationProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthenticationProviderSlice, error) {
	var o []*AuthenticationProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthenticationProvider slice")
	}

	if len(authenticationProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthenticationProvider records in the query.
func (q authenticationProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authentication_providers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authenticationProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authentication_providers exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *AuthenticationProvider) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// PasswordResets retrieves all the password_reset's PasswordResets with an executor.
func (o *AuthenticationProvider) PasswordResets(mods ...qm.QueryMod) passwordResetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`password_resets`.`authentication_provider_id`=?", o.ID),
	)

	query := PasswordResets(queryMods...)
	queries.SetFrom(query.Query, "`password_resets`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`password_resets`.*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authenticationProviderL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthenticationProvider interface{}, mods queries.Applicator) error {
	var slice []*AuthenticationProvider
	var object *AuthenticationProvider

	if singular {
		object = maybeAuthenticationProvider.(*AuthenticationProvider)
	} else {
		slice = *maybeAuthenticationProvider.(*[]*AuthenticationProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authenticationProviderR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authenticationProviderR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(authenticationProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthenticationProviders = append(foreign.R.AuthenticationProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthenticationProviders = append(foreign.R.AuthenticationProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadPasswordResets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authenticationProviderL) LoadPasswordResets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthenticationProvider interface{}, mods queries.Applicator) error {
	var slice []*AuthenticationProvider
	var object *AuthenticationProvider

	if singular {
		object = maybeAuthenticationProvider.(*AuthenticationProvider)
	} else {
		slice = *maybeAuthenticationProvider.(*[]*AuthenticationProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authenticationProviderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authenticationProviderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`password_resets`), qm.WhereIn(`authentication_provider_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load password_resets")
	}

	var resultSlice []*PasswordReset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice password_resets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on password_resets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for password_resets")
	}

	if len(passwordResetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PasswordResets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &passwordResetR{}
			}
			foreign.R.AuthenticationProvider = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AuthenticationProviderID {
				local.R.PasswordResets = append(local.R.PasswordResets, foreign)
				if foreign.R == nil {
					foreign.R = &passwordResetR{}
				}
				foreign.R.AuthenticationProvider = local
				break
			}
		}
	}

	return nil
}

// SetUser of the authenticationProvider to the related item.
// Sets o.R.User to related.
// Adds o to related.R.AuthenticationProviders.
func (o *AuthenticationProvider) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `authentication_providers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, authenticationProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &authenticationProviderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthenticationProviders: AuthenticationProviderSlice{o},
		}
	} else {
		related.R.AuthenticationProviders = append(related.R.AuthenticationProviders, o)
	}

	return nil
}

// AddPasswordResets adds the given related objects to the existing relationships
// of the authentication_provider, optionally inserting them as new records.
// Appends related to o.R.PasswordResets.
// Sets related.R.AuthenticationProvider appropriately.
func (o *AuthenticationProvider) AddPasswordResets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PasswordReset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuthenticationProviderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `password_resets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"authentication_provider_id"}),
				strmangle.WhereClause("`", "`", 0, passwordResetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuthenticationProviderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authenticationProviderR{
			PasswordResets: related,
		}
	} else {
		o.R.PasswordResets = append(o.R.PasswordResets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &passwordResetR{
				AuthenticationProvider: o,
			}
		} else {
			rel.R.AuthenticationProvider = o
		}
	}
	return nil
}

// AuthenticationProviders retrieves all the records using an executor.
func AuthenticationProviders(mods ...qm.QueryMod) authenticationProviderQuery {
	mods = append(mods, qm.From("`authentication_providers`"))
	return authenticationProviderQuery{NewQuery(mods...)}
}

// FindAuthenticationProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthenticationProvider(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AuthenticationProvider, error) {
	authenticationProviderObj := &AuthenticationProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `authentication_providers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authenticationProviderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authentication_providers")
	}

	return authenticationProviderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthenticationProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authentication_providers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authenticationProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authenticationProviderInsertCacheMut.RLock()
	cache, cached := authenticationProviderInsertCache[key]
	authenticationProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authenticationProviderColumns,
			authenticationProviderColumnsWithDefault,
			authenticationProviderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `authentication_providers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `authentication_providers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `authentication_providers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authenticationProviderPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authentication_providers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authenticationProviderMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for authentication_providers")
	}

CacheNoHooks:
	if !cached {
		authenticationProviderInsertCacheMut.Lock()
		authenticationProviderInsertCache[key] = cache
		authenticationProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthenticationProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthenticationProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authenticationProviderUpdateCacheMut.RLock()
	cache, cached := authenticationProviderUpdateCache[key]
	authenticationProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authenticationProviderColumns,
			authenticationProviderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authentication_providers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `authentication_providers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authenticationProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, append(wl, authenticationProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authentication_providers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authentication_providers")
	}

	if !cached {
		authenticationProviderUpdateCacheMut.Lock()
		authenticationProviderUpdateCache[key] = cache
		authenticationProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authenticationProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authentication_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authentication_providers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthenticationProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authenticationProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `authentication_providers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authenticationProviderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authenticationProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authenticationProvider")
	}
	return rowsAff, nil
}

var mySQLAuthenticationProviderUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthenticationProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authentication_providers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authenticationProviderColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuthenticationProviderUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authenticationProviderUpsertCacheMut.RLock()
	cache, cached := authenticationProviderUpsertCache[key]
	authenticationProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authenticationProviderColumns,
			authenticationProviderColumnsWithDefault,
			authenticationProviderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			authenticationProviderColumns,
			authenticationProviderPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert authentication_providers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "authentication_providers", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `authentication_providers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for authentication_providers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == authenticationProviderMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(authenticationProviderType, authenticationProviderMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for authentication_providers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for authentication_providers")
	}

CacheNoHooks:
	if !cached {
		authenticationProviderUpsertCacheMut.Lock()
		authenticationProviderUpsertCache[key] = cache
		authenticationProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthenticationProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthenticationProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthenticationProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authenticationProviderPrimaryKeyMapping)
	sql := "DELETE FROM `authentication_providers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authentication_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authentication_providers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authenticationProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authenticationProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authentication_providers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authentication_providers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthenticationProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthenticationProvider slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(authenticationProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authenticationProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `authentication_providers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authenticationProviderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authenticationProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authentication_providers")
	}

	if len(authenticationProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthenticationProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthenticationProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthenticationProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthenticationProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authenticationProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `authentication_providers`.* FROM `authentication_providers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authenticationProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthenticationProviderSlice")
	}

	*o = slice

	return nil
}

// AuthenticationProviderExists checks if the AuthenticationProvider row exists.
func AuthenticationProviderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `authentication_providers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authentication_providers exists")
	}

	return exists, nil
}
