// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AuthUserInput struct {
	// Input for user login (email)
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CompletePasswordResetInput struct {
	// Input for password reset completion
	Token       string `json:"token"`
	NewPassword string `json:"newPassword"`
}

type CreateUserInput struct {
	// Input for new user (email)
	Email       string `json:"email"`
	Password    string `json:"password"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	PhoneNumber string `json:"phoneNumber"`
}

type RequestPasswordResetInput struct {
	// Input for request password reset
	Email string `json:"email"`
}

type ValidatePasswordResetInput struct {
	// Input for password reset token validation
	Token string `json:"token"`
}

// The type return on user authenticated
type AuthenticatedUser struct {
	// The user id
	ID int `json:"id"`
	// JWT string for authentication
	Token string `json:"token"`
}

type RoleType string

const (
	RoleTypeUser               RoleType = "USER"
	RoleTypeResourceOwner      RoleType = "RESOURCE_OWNER"
	RoleTypeOrganizationAdmin  RoleType = "ORGANIZATION_ADMIN"
	RoleTypeOrganizationMember RoleType = "ORGANIZATION_MEMBER"
	RoleTypeSuperAdmin         RoleType = "SUPER_ADMIN"
)

var AllRoleType = []RoleType{
	RoleTypeUser,
	RoleTypeResourceOwner,
	RoleTypeOrganizationAdmin,
	RoleTypeOrganizationMember,
	RoleTypeSuperAdmin,
}

func (e RoleType) IsValid() bool {
	switch e {
	case RoleTypeUser, RoleTypeResourceOwner, RoleTypeOrganizationAdmin, RoleTypeOrganizationMember, RoleTypeSuperAdmin:
		return true
	}
	return false
}

func (e RoleType) String() string {
	return string(e)
}

func (e *RoleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleType", str)
	}
	return nil
}

func (e RoleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
